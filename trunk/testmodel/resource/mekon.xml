<?xml version="1.0" encoding="UTF-8"?>

<HOBOModel>

	<!--
		Specification of Object Model - will load all classes
		that implement the DObject interface from specified
		package and any sub-packages.

		(Comment out this line to create frames-based model
		derived entirely from the ontology, with no associated
		Object Model.)
	-->
	<DirectModelSection topLevelPackage="uk.ac.manchester.cs.hobo.testmodel"/>

	<!--
		Specification of ontology to be loaded. Can be multiple such
		ontologies of various types. Specified via the plug-in
		class responsible for loading the ontology, plus "custom"
		configuration specific to the particular plug-in.

		Specified plug-in class is OSSectionBuilder which loads OWL
		ontologies via a "sanctioning" mechanism.
	-->
	<ModelSection
		builder="uk.ac.manchester.cs.mekon.owl.sanctions.OSSectionBuilder">

		<!--
			Information concerning location of OWL ontology, type
			of DL reasoner to be used, and special property for
			representing numeric-values (as required by
			OSSectionBuilder and OCClassifier plug-in classes).
		-->
		<OWLModel
			owlFile="test.owl"
			reasonerFactory="uk.ac.manchester.cs.jfact.JFactFactory"
			numericProperty="http://mekon/test.owl#numericValue">
		</OWLModel>

		<!--
			Configuration information for OCClassifier plug-in
			class that will create and classify OWL expressions
			representing the current states of the HOBO IFrames.

			The semantics embodied by the classifiable expressions
			can be either OPEN_WORLD or CLOSED_WORLD, with exceptions
			specied for specific properties.
		-->
		<OWLClassifier
			loggingEnabled="FALSE">
			<SlotSemantics
				default="OPEN_WORLD">
				<ExceptionProperty uri="http://mekon/test.owl#job"/>
			</SlotSemantics>
		</OWLClassifier>

		<!--
			Configuration information for the actual "sanctioning"
			mechanism responsible for loading the OWL ontology into
			the HOBO frames structures.

			Concept hierarchies can be explicitly included, either
			including or excluding the root-concept of the hierarchy.
			If no explicit concept-inclusions are specified then
			all concepts in the ontology will be included.

			Specifications of concept hierarchies can include
			specifications of which concepts are to be defined as
			"hidden". Definitions are expressed via appropriate
			OSConceptHidingScope and OSConceptHidingFilter enum
			values (see relevant Javadoc). If no explicit
			concept-inclusions are specified then all concepts
			in the ontology will be included.

			Property hierarchies can be explicitly included via
			"PropertyInclusion" constructs, similar to the
			"ConceptInclusion" constructs but with no "hiding"
			definitions. If no explicit property-inclusions are
			specified then all properties in the ontology will be
			included.
		-->
		<OWLSanctionedModel
			metaFrameSlotsEnabled="TRUE"
			retainOnlyDeclarationAxioms="TRUE">
			<ConceptInclusion>
				<Group
					rootURI="http://mekon/test.owl#DataTypeConcept"
					includeRoot="TRUE"/>
				<Group
					rootURI="http://mekon/test.owl#DomainConcept"
					includeRoot="TRUE"
					conceptHidingScope="ALL"
					conceptHidingFilter="DEFINIED_SUB_TREES_ONLY"/>
			</ConceptInclusion>
			<PropertyInclusion>
				<Group
					rootURI="http://mekon/test.owl#simpleObjectProperty"
					includeRoot="FALSE"/>
				<Group
					rootURI="http://mekon/test.owl#referencableObjectProperty"
					includeRoot="TRUE"
					mirrorAsFrames="TRUE"/>
			</PropertyInclusion>
		</OWLSanctionedModel>

	</ModelSection>

	<!--
		Mappings between Java classes/fields from the Object Model
		and classes/properties from the ontology.
	-->
	<Mappings>
		<ClassMap
			javaClass="uk.ac.manchester.cs.hobo.testmodel.Citizen"
			externalId="http://mekon/test.owl#Citizen">
			<FieldMap fieldName="employment" externalId="http://mekon/test.owl#employment"/>
			<FieldMap fieldName="tax" externalId="http://mekon/test.owl#taxPaid"/>
			<FieldMap fieldName="benefits" externalId="http://mekon/test.owl#benefitReceived"/>
		</ClassMap>
		<ClassMap
			javaClass="uk.ac.manchester.cs.hobo.testmodel.Employment"
			externalId="http://mekon/test.owl#Employment">
			<FieldMap fieldName="jobs" externalId="http://mekon/test.owl#job"/>
			<FieldMap fieldName="jobCount" externalId="http://mekon/test.owl#jobCount"/>
		</ClassMap>
		<ClassMap
			javaClass="uk.ac.manchester.cs.hobo.testmodel.Job"
			externalId="http://mekon/test.owl#Job">
			<FieldMap fieldName="hourlyPay" externalId="http://mekon/test.owl#hourlyPay"/>
			<FieldMap fieldName="weeklyPay" externalId="http://mekon/test.owl#weeklyPay"/>
			<FieldMap fieldName="hoursPerWeek" externalId="http://mekon/test.owl#hoursPerWeek"/>
		</ClassMap>
		<ClassMap
			javaClass="uk.ac.manchester.cs.hobo.testmodel.CitizenAspect"
			externalId="http://mekon/test.owl#CitizenAspect"/>
		<ClassMap
			javaClass="uk.ac.manchester.cs.hobo.testmodel.TravelAspect"
			externalId="http://mekon/test.owl#TravelAspect"/>
		<ClassMap
			javaClass="uk.ac.manchester.cs.hobo.testmodel.Tax"
			externalId="http://mekon/test.owl#Tax"/>
		<ClassMap
			javaClass="uk.ac.manchester.cs.hobo.testmodel.NonZeroTax"
			externalId="http://mekon/test.owl#NonZeroTax"/>
		<ClassMap
			javaClass="uk.ac.manchester.cs.hobo.testmodel.Benefit"
			externalId="http://mekon/test.owl#Benefit"/>
		<ClassMap
			javaClass="uk.ac.manchester.cs.hobo.testmodel.UnemploymentBenefit"
			externalId="http://mekon/test.owl#UnemploymentBenefit"/>
		<ClassMap
			javaClass="uk.ac.manchester.cs.hobo.testmodel.TravelMode"
			externalId="http://mekon/test.owl#TravelMode"/>
		<ClassMap
			javaClass="uk.ac.manchester.cs.hobo.testmodel.summary.PropertyRef"
			externalId="http://mekon/test.owl#referencableObjectProperty"/>
	</Mappings>

</HOBOModel>
