#summary Overview description of the HOBO framework.

= HOBO =

HOBO is an extension of [MEKON] that enables the creation of *hybrid models* wherein individual entities from a domain specific Java *object model (OM)* are bound to entities from a MEKON *frames model (FM)*, enabling seamless integration between the OM and a set of externally represented *knowledge sources*, with model-instantiation updates being determined via both external *reasoning mechanisms* and internal *procedural processing*, as provided by the OM.

----
== Hybrid Models ==

HOBO models are hybrid in two distinct senses:

*Hybrid sources:* Entities in HOBO models are derived from either (or in the case of certain key entities, both) of:

 * Internal Java *object model (OM)*
 * One or more *external knowledge sources*

*Hybrid access:* HOBO models are accessible via complimentary model-access APIs:

 * The domain-specific OM provides a *domain-specific API*
 * The generic FM provides a *Domain-neutral API*

In general the OM will cover a relatively small core section of the model, providing the central structure but representing only the most general domain concepts, whilst one or more external knowledge sources (possibly of varying types) will provide the, generally vastly larger, body of detailed domain knowledge.

A small number of "key" entities (concepts, concept-relations and concept-attributes) will be represented both in the OM and the external knowledge sources, with appropriate mappings being provided via the HOBO configuration system. It may well be that all OM entities are in fact key entities.

----
== Binding of Object Model to Frames Model ==

All entities in the OM (i.e. classes and fields) will be bound to corresponding entities in the FM (i.e. concept-level frames and slots). Creation of model-instantiations in either representation, will cause corresponding instantiations to be automatically created in the other.

Any updates to OM instantiations, made either manually via the domain-specific API, or automatically as the result of procedural mechanisms attached to the OM, will be reflected in corresponding updates to the bound FM instantiations. Conversely, any updates to FM instantiations, made either manually via the domain-neutral API, or automatically as the result of reasoning associated with external knowledge sources, will be reflected in corresponding updates to the OM instantiations.

----
== HOBO Applicability ==

Use of a HOBO OM can offer the following advantages over use of a raw MEKON FM:

 * *Domain-specific API:* Provides a more natural way of accessing the model when the application itself needs to embody domain-specific knowledge
 * *Domain-specific processing:* Can be provided via the OM, meaning that an OM can sometimes be useful even when the application will only be using the generic domain-neutral FM API
 * *Model extendability:* Allows additional entities, useful to the applications that the model will drive, to be added to the those derived from the external knowledge sources

If none of the above features are required then it is likely that a raw [MEKON] model will better meet your requirements.